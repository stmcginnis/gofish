//
// SPDX-License-Identifier: BSD-3-Clause
//

package {{ package }}

import (
	"encoding/json"
	"reflect"

	"github.com/stmcginnis/gofish/common"
)

{% for enum in enums %}

{{ enum.description }}
type {{ enum.name }} string

const (
{%- for enum_member in enum.members %}
    {{ enum_member.description }}
    {{ enum_member.identname }}{{ enum.name }} {{ enum.name }} = "{{ enum_member.name }}"
{%- endfor %}
)
{%- endfor %}
{% for class in classes -%}

{{ class.description }}
type {{ class.name }} struct {
{%- if class.isEntity %}
    common.Entity
{%- endif %}
{%- for attr in class.attrs %}
    {{ attr.description }}
    {{ attr.name }}  {{ attr.type }}
{%- endfor %}
{%- if class.isEntity and class.rwAttrs|length > 0 %}
	// rawData holds the original serialized JSON so we can compare updates.
	rawData []byte
{%- endif %}
}

// UnmarshalJSON unmarshals a {{ class.name }} object from the raw JSON.
func ({{ class.name|lower }} *{{ class.name }}) UnmarshalJSON(b []byte) error {
    type temp {{ class.name }}
    var t struct {
        temp
    }

    err := json.Unmarshal(b, &t)
    if err != nil {
        return err
    }

    *{{ class.name|lower }} = {{ class.name }}(t.temp)

    // Extract the links to other entities for later

{% if class.isEntity and class.rwAttrs|length > 0 %}
	// This is a read/write object, so we need to save the raw object data for later
	{{ class.name|lower }}.rawData = b
{%- endif %}

    return nil
}

{%- if class.isEntity and class.rwAttrs|length > 0 %}
// Update commits updates to this object's properties to the running system.
func ({{ class.name|lower }} *{{ class.name }}) Update() error {
	// Get a representation of the object's original state so we can find what
	// to update.
	original := new({{ class.name }})
	original.UnmarshalJSON({{ class.name|lower }}.rawData)

	readWriteFields := []string{
{%- for rwAttr in class.rwAttrs %}
        "{{ rwAttr }}",
{%- endfor %}
	}

	originalElement := reflect.ValueOf(original).Elem()
	currentElement := reflect.ValueOf({{ class.name|lower }}).Elem()

	return {{ class.name|lower }}.Entity.Update(originalElement, currentElement, readWriteFields)
}
{%- endif %}

{% if class.name == object_name %}
// Get{{ class.name }} will get a {{ class.name }} instance from the service.
func Get{{ class.name }}(c common.Client, uri string) (*{{ class.name }}, error) {
	common.GetObject[{{ class.name }}](c, uri)
}

// ListReferenced{{ class.name }}s gets the collection of {{ class.name }} from
// a provided reference.
func ListReferenced{{ class.name }}s(c common.Client, link string) ([]*{{ class.name }}, error) {
	return common.GetCollectionObjects[{{ class.name }}](c, link)
}

{% endif %}
{% endfor %}
